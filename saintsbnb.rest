# saintsBnb.rest

# ===============================================
# GLOBAL VARIABLES (Adjust these as needed)
# ===============================================
@hostname = localhost
@port = 5000
@host = {{hostname}}:{{port}}
@baseUrl = http://{{host}}

# --- User specific variables (adjust for your test user) ---
@userEmail = testUser_{{$timestamp}}@example.com
@userPassword = StrongPassword123!
@userName = Test User
@userPhone = 11987654321
@userRole = host

# --- Dynamic variables (will be set by responses) ---
@userId =
@housingId =

# ===============================================
# 1. User Management (CRUD & Auth)
# ===============================================

###
# @name 1.1 Register New User
# This creates a user. The user is automatically logged in upon successful registration.
POST {{baseUrl}}/users/register
Content-Type: application/json
Accept: application/json

{
    "name": "{{userName}}",
    "email": "{{userEmail}}",
    "password": "{{userPassword}}",
    "phone": "{{userPhone}}",
    "role": "{{userRole}}"
}

###
# @name 1.2 Login Existing User (if not auto-logged in by register or testing existing user)
# Make sure your server is running to get the session cookie.
POST {{baseUrl}}/users/login-local
Content-Type: application/json
Accept: application/json

{
    "email": "{{userEmail}}",
    "password": "{{userPassword}}"
}

###
# @name 1.3 Get All Users (Protected)
# Requires authentication (session cookie from login)
GET {{baseUrl}}/users
Accept: application/json

###
# @name 1.4 Get User by ID (Protected)
# Requires authentication. Replace {{userId}} with an actual user ID if not using dynamic variable.
# To get the ID, you can copy it from the response of "1.1 Register New User" or "1.3 Get All Users".
GET {{baseUrl}}/users/{{userId}}
Accept: application/json

###
# @name 1.5 Create New User (Admin-level, Protected)
# Requires authentication. This is different from /register for self-service sign-up.
# The `role` can be any of 'guest', 'host', 'admin'.
POST {{baseUrl}}/users
Content-Type: application/json
Accept: application/json

{
    "name": "New Admin User",
    "email": "admin{{$timestamp}}@example.com",
    "password": "AdminPassword123!",
    "phone": "99988877766",
    "role": "admin"
}

###
# @name 1.6 Update User by ID (Protected)
# Requires authentication. Updates the user created in 1.1.
PUT {{baseUrl}}/users/{{userId}}
Content-Type: application/json
Accept: application/json

{
    "name": "{{userName}} Updated",
    "phone": "9876543210"
}

###
# @name 1.7 Delete User by ID (Protected)
# Requires authentication. Deletes the user created in 1.5.
# Make sure to set the correct userId (e.g., from the new user created in 1.5).
DELETE {{baseUrl}}/users/{{userId}}
Accept: application/json

# ===============================================
# 2. Housing Management (CRUD)
# ===============================================

###
# @name 2.1 Create Housing Post (Protected)
# Requires authentication. The user_id will be automatically set to the logged-in user's ID.
POST {{baseUrl}}/housing
Content-Type: application/json
Accept: application/json

{
    "rooms": 3,
    "availability": true,
    "price": 150.75,
    "address": "123 Main Street, City, State, Country",
    "maxOccupants": 5,
    "features": ["wifi", "kitchen", "free parking"],
    "description": "A lovely 3-bedroom apartment close to the temple with all amenities.",
    "images": ["http://example.com/image1.jpg", "http://example.com/image2.jpg"]
}

@housingId = {{response.body.housing._id}}

###
# @name 2.2 Get All Housing Posts
# Publicly accessible.
GET {{baseUrl}}/housing
Accept: application/json

###
# @name 2.3 Get Housing Post by ID
# Publicly accessible. Uses the ID from the previous 'Create Housing Post' response.
GET {{baseUrl}}/housing/{{housingId}}
Accept: application/json

###
# @name 2.4 Update Housing Post by ID (Protected, Owner Only)
# Requires authentication and the logged-in user must be the owner of the post.
PUT {{baseUrl}}/housing/{{housingId}}
Content-Type: application/json
Accept: application/json

{
    "price": 165.00,
    "description": "A lovely 3-bedroom apartment updated with new price and more details."
}

###
# @name 2.5 Delete Housing Post by ID (Protected, Owner Only)
# Requires authentication and the logged-in user must be the owner of the post.
DELETE {{baseUrl}}/housing/{{housingId}}
Accept: application/json

# ===============================================
# 3. Authentication & Session Management
# ===============================================

###
# @name 3.1 Get Dashboard (Protected)
# Requires authentication. Tests if the session is active.
GET {{baseUrl}}/users/dashboard
Accept: application/json

###
# @name 3.2 Logout User
# This will destroy the session and clear the cookie.
GET {{baseUrl}}/users/logout
Accept: application/json

###
# @name 3.3 Get Dashboard After Logout (Should Fail)
# Should return 401 Unauthorized.
GET {{baseUrl}}/users/dashboard
Accept: application/json

# ===============================================
# 4. Validation Testing (Optional)
# ===============================================

###
# @name 4.1 Test User Registration Validation Failure (Invalid Email)
POST {{baseUrl}}/users/register
Content-Type: application/json
Accept: application/json

{
    "name": "Invalid User",
    "email": "invalid-email",
    "password": "Password123!",
    "role": "guest"
}

###
# @name 4.2 Test Housing Creation Validation Failure (Invalid Rooms)
POST {{baseUrl}}/housing
Content-Type: application/json
Accept: application/json

{
    "rooms": 0,
    "availability": true,
    "price": 100,
    "address": "Short",
    "maxOccupants": 0,
    "description": "Too short"
}